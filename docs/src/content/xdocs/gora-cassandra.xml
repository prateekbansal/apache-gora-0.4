<?xml version="1.0"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">

<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<document>
  <header>
    <title>Gora Cassandra Module</title>
  </header>
  
  <body>

  <section>
    <title> Overview </title>
    <p> This is the main documentation for the <b>gora-cassandra</b> module. gora-cassandra 
     module enables <a href="ext:cassandra">Apache Cassandra</a> backend support for Gora. </p>
  </section>

  <section>
    <title> gora.properties </title>
    <p>To configure the <b>CassandraStore</b> one would typically set the following:<br/>
    <code>gora.cassandra.servers=<i>localhost:9160</i></code> - This value should specify the host:port 
    for a running Cassandra server or node. In this case the server happens to be running on 
    localhost at port 9160 which is the default Cassandra server configuration.<br/> 
    </p>
  </section>


  <section>
    <title> Gora Cassandra mappings </title>
    <p> Say we wished to map some Employee data and store it into the CassandraStore.</p>
    <p><source>
    &lt;gora-orm&gt;
      &lt;keyspace name="Employee" host="localhost" cluster="Gora Cassandra Test Cluster"&gt;
        &lt;family name="p"/&gt;
        &lt;family name="f"/&gt;
        &lt;family name="sc" type="super" /&gt;
      &lt;/keyspace>

      &lt;class name="org.apache.gora.examples.generated.Employee" keyClass="java.lang.String" keyspace="Employee"&gt;
        &lt;field name="name"  family="p" qualifier="info:nm"/&gt;
        &lt;field name="dateOfBirth"  family="p" qualifier="info:db"/&gt;
        &lt;field name="ssn"  family="p" qualifier="info:sn"/&gt;
        &lt;field name="salary"  family="p" qualifier="info:sl"/&gt;
      &lt;/class&gt;
      ...
    &lt;/gora-orm&gt;
    </source></p>
    <p>Here you can see that within the <code>keyspace</code> section we specify the Cassandra 
    keyspace schema name <b>Employee</b>, the host <b>localhost</b> and the cluster name 
    <b>Gora Cassandra Test Cluster</b>. Additionally we are required to specify the type of 
    column families we wish to create within Cassandra. In this case we create three columns; 
    <b>p</b>, <b>f</b> and <b>sc</b> the last of which is further defined as a super column.</p> 
    <p>Further to this, within the Cassandra mappings we are required to specify persistent fields 
    which values should map to. In the above example we see that within the <code>class</code> element
    the generated class name <b>org.apache.gora.examples.generated.Employee</b> specifies the Avro generated
    persistent class, the keyClass <b>java.lang.String</b> which specifies the keys which map to the field 
    values and finally the keyspace <b>Employee</b> which matches to the above keyspace definition.</p>
    <p>Finally fields which are to be persisted into Cassandra need to be configuired such that they 
    receive a name (<b>name</b>, <b>dateOfBirth</b>, <b>ssn</b> and <b>salary</b> respectively), the column family 
    to which they belong (all <b>p</b> in this case) and additionally a qualifier, which enables 
    more granular control over the data to be persisted into Cassandra.</p>
  </section>

  </body>
</document>
